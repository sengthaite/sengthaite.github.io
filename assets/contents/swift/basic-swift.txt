---
title: Basic Swift Programming Language
exerpt: Swift contents
---


### Table of Content

- [Comment](#comment)
- [Literal](#literal)
- [Basic Data Types](#basic-data-types)
- [Operator](#operator)
- [Basic Data Structures](#basic-data-structures)
- [Property](#property)
- [Closure](#closure)
- [Optional](#optional)
- [Error Handling](#error-handling)
- [Assertion and Precondition](#assertion-and-precondition)

<br />

Read Duration: **30mn**

<br />

<h2 id="comment">I. Comment</h2>

> Why using comment? <br />
> => It is used as a note or reminder. It is ignored by the Swift compiler.

<br />

### Single Line Comment (// Single line comment)

```swift
// TODO: implement the function
func fibonacci()-> Double {
    return 0.0
}
```

<br />

### Multi Line Comment (/* Multi-line comment */)

```swift
/*
Steps:
1. Buy eggs
2. Cracks egges to bolw
3. Stir well
4. Add salt
5. Fire the pan
6. Pour the egg in the pan
7. After well done put it to the plate
*/
func makeFriedEggs() {
}
```

<br />

### Symbol Documentation (/// Documentation)

> Why symbol documentation?
> => API (methods) should well describe itself. However, itself alone cannot explain the important information like:
>
> - Overall architecture
> - Relationships and dependencies between components in the API
> - Boundary conditions, side effects, and errors that occur when using the API

```swift
/// Eat the provided specialty sloth food.
///
/// Sloths love to eat while they move very slowly through their rainforest
/// habitats. They are especially happy to consume leaves and twigs, which they
/// digest over long periods of time, mostly while they sleep.
///
/// When they eat food, a sloth's `energyLevel` increases by the food's `energy`.
mutating public func eat(_ food: Food, quantity: Int) throws -> Int
```

[Read More](https://developer.apple.com/documentation/xcode/writing-symbol-documentation-in-your-source-files)

<br />

<h2 id="literal">II. Literal</h2>

> **Literal Value** is a value that appears directly in your source code.

```swift
// Mark: String literal
let name = "Sengthai"

// Mark: Floating-point literal
let pi = 3.14159

// Mark : Integer literal
let decimalInteger = 17

// Mark: Help readability
let someNumber = 2_000_000.000_123 // same as 2000000.000123
```

<br />

<h2 id="basic-data-types">III. Basic Data Types</h2>

- Int
- Float
- Double
- String
- Character
- Bool

```swift
// Int
let someInt = 10 // type inference to Int for literal number 10
// Float
let someFloat: Float = 2.5
// Double
let someDouble = 2.5
// String
let someString = "This is some string."
// Character
let someCharacter: Character = "A"
// Boolean
let someBool = 10 > 2
```

> All of the basic data type is struct.

<br />

<h2 id="operator">IV. Operators</h2>

- Operator: a special symbol or phrase that you use to check, change, or combine values.
- Some types of operator: **Assignment**, **Arithmetic**, **Comparison**, **Tinary**, **Nil-Coalesing**, **Logical**, **Range**
- Operators are : unary, binary, or ternary

```swift
// Unary prefix operator negative (-)
let spendingAmount = -200

// Infix operator plus (+)
let addition = 10 + 2

// Unary postfix operator force-unwrap (!)
let optionalInt = Int(10)
let result = optionalInt! + 2

// Combined operator
var someNumber = 10
someNumber += 2 // means someNumber = someNumber + 2

// Assignment operator (=)
let name = "John"

// Arithmetic operators (+, -, *, /, %)
let addition = 10 + 2
let subtraction = 2 - 10
let multiplication = 5 * 6
let division = 2 / 9
let remainder = -10 % 2

// Comparison operators (>, >=, <, <=, ==)
let isEqual = 10 == 2
let isSmaller = 10 < 5
let isSmallerOrEqual = 10 <= 10
let isLarger = 2 > 2

// Ternary operator: use to replace if-else for short condition
/*
let shortDecision = condition ? someValue : otherValue
means
let shortDecision
if condition {
    shortDecision = someValue
} else {
    shortDecision = otherValue
}
*/
let someValue = 94
let maxValue = 100
let decisionValue = someValue > 100 ? 100 : someValue

// Nil-Coalesing operator (??): use to provide default value if initial value is nil
/*
let optionalValue: Int?
let finalResult = optionalValue ?? 0
means
let finalResult = optionalValue == nil ? 0 : optionalValue!
*/
let optionalValue: Int? = 10
let value: Int = optionalValue ?? 0

// Logical operators (!, &&, ||): use with boolean operator
let notFalse = !false
let andCondition = false && true
let orCondition = false || true

// Range operator (closed range, half-open range, one-sided range)
let closedRange: ClosedRange<Int> = 1...5 // means 1, 2, 3, 4, 5
let halfOpenRange: Range<Int> = 1..<5 // means 1, 2, 3, 4
let oneSidedRange: PartialRangeThrough<Int> = ...2
let names: [String] = ["John", "Marry", "Phillips", "Mark"]
let someNames = names[..<2]
```

<br />

<h2 id="basic-data-structures">V. Basic Data Structures</h2>

- **Array**: store values of the same type in order
- **Set**: store distinct values of the same type without defined ordering
- **Dictionary**: store values with (key: value) pairs with keys of the same type and values of the same type and keys are unique.

<h2 id="property">VI. Property</h2>

- Property : associate values with a particular class, structure, or enumeration.
- Stored Property : a constant or variable that’s stored as part of an instance of a particular class or structure
- Lazy Stored Property : a property whose initial value isn’t calculated until the first time it’s used

```swift
    class DataImporter {
        /*
        DataImporter is a class to import data from an external file.
        The class is assumed to take a nontrivial amount of time to initialize.
        */
        var filename = "data.txt"
        // the DataImporter class would provide data importing functionality here
    }

    class DataManager {
        lazy var importer = DataImporter()
        var data: [String] = []
        // the DataManager class would provide data management functionality here
    }

    let manager = DataManager()
    manager.data.append("Some data")
    manager.data.append("Some more data")
    // the DataImporter instance for the importer property hasn't yet been created

```

- Computed Property : they provide a getter and an optional setter to retrieve and set other properties and values indirectly (don’t actually store a value)

```swift
    struct Point {
        var x = 0.0, y = 0.0
    }
    struct Size {
        var width = 0.0, height = 0.0
    }
    struct Rect {
        var origin = Point()
        var size = Size()
        var center: Point {
            get {
                let centerX = origin.x + (size.width / 2)
                let centerY = origin.y + (size.height / 2)
                return Point(x: centerX, y: centerY)
            }
            set(newCenter) {
                origin.x = newCenter.x - (size.width / 2)
                origin.y = newCenter.y - (size.height / 2)
            }
        }
    }
    var square = Rect(origin: Point(x: 0.0, y: 0.0),
                      size: Size(width: 10.0, height: 10.0))
    let initialSquareCenter = square.center
    // initialSquareCenter is at (5.0, 5.0)
    square.center = Point(x: 15.0, y: 15.0)
    print("square.origin is now at (\(square.origin.x), \(square.origin.y))")
    // Prints "square.origin is now at (10.0, 10.0)"

```

- Property Wrapper: add a layer of seperation between code that manages how a property is stored and the code that defines a property.

```swift
    @propertyWrapper
    struct SmallNumber {
        private var number: Int
        private(set) var projectedValue: Bool

        var wrappedValue: Int {
            get { return number }
            set {
                if newValue > 12 {
                    number = 12
                    projectedValue = true
                } else {
                    number = newValue
                    projectedValue = false
                }
            }
        }

        init() {
            self.number = 0
            self.projectedValue = false
        }
    }
    struct SomeStructure {
        @SmallNumber var someNumber: Int
    }
    var someStructure = SomeStructure()

    someStructure.someNumber = 4
    print(someStructure.$someNumber)
    // Prints "false"

    someStructure.someNumber = 55
    print(someStructure.$someNumber)
    // Prints "true"

```

- Type Property: properties that belong to an instance of a particular type. It can be defined with the **static** keyword or **class** keyword if the property allow subclassing.

```swift
    struct SomeStructure {
        static var storedTypeProperty = "Some value."
        static var computedTypeProperty: Int {
            return 1
        }
    }
    enum SomeEnumeration {
        static var storedTypeProperty = "Some value."
        static var computedTypeProperty: Int {
            return 6
        }
    }
    class SomeClass {
        static var storedTypeProperty = "Some value."
        static var computedTypeProperty: Int {
            return 27
        }
        class var overrideableComputedTypeProperty: Int {
            return 107
        }
    }

```

<h2 id="closure">VII. Closure</h2>

> **Closure** : self-contained blocks of functionality that can be passed around and used in your code.

> **Global function** : closures that have a name and don't capture any values.

> **Nested function** : closures that have a name and can capture from their enclosing function

> **Closure expressions** : unnamed closures written in a lightweight syntax that can capture values from their surrounding context

```swift
{ (parameters)-> return-type in
    statements
}
```

> **Autoclosure** : a closure that's automatically created to wrap an expression that's being passed as an argument to a function.

<h2 id="optional">VIII. Optional</h2>

> **Optional Chaining** : a process for querying and calling properties, methods, and subscripts on an optional that might currently be nil.

<h2 id="error-handling">IX. Error Handling</h2>

> **Error handling** : the process of responding to and recovering from error conditions in your program.

```swift
do {
    try expression
    statements
} catch pattern1 {
    statements
} catch pattern2 where condition {
    statements
} catch patter3, patter4 where condition {
    statements
} catch {
    statements
}
```

> **defer** : execute a set of statements just before code execution leaves the current block of code.

<h2 id="assertion-and-precondition">X. Assertion and Precondition</h2>

> **Assertions and preconditions** : checks that happen at runtime. You used them to make sure an essential condition is satisfied before executing any further code.

```swift
let age = -3
assert(age >= 0, "A person's age can't be less than zero.")
// This assertion fails because -3 isn't >= 0.
assert(age >= 0)
```

```swift
if age > 10 {
    print("You can ride the roller-coaster or the ferris wheel.")
} else if age >= 0 {
    print("You can ride the ferris wheel.")
} else {
    assertionFailure("A person's age can't be less than zero.")
}

```

> **Precondition** : use when a condition has the potential to be false, but must definitely be true for your code to continue execution.

## Recap

<br />

## Check understanding
